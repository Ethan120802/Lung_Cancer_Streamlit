import pickle
import streamlit as st
from streamlit_option_menu import option_menu

import streamlit as st
import streamlit.components.v1 as components

# embed streamlit docs in a streamlit app



import streamlit as st
import streamlit.components.v1 as components

# bootstrap 4 collapse example
components.html(
    """
 
<div>Teachable Machine Image Model</div>
<button type="button" onclick="init()">Start</button>
<div id="webcam-container"></div>
<div id="label-container"></div>
<script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@1.3.1/dist/tf.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@teachablemachine/image@0.8/dist/teachablemachine-image.min.js"></script>
<script type="text/javascript">
    // More API functions here:
    // https://github.com/googlecreativelab/teachablemachine-community/tree/master/libraries/image

    // the link to your model provided by Teachable Machine export panel
    const URL = "https://teachablemachine.withgoogle.com/models/hV6KLmxrd/";

    let model, webcam, labelContainer, maxPredictions;

    // Load the image model and setup the webcam
    async function init() {
        const modelURL = URL + "model.json";
        const metadataURL = URL + "metadata.json";

        // load the model and metadata
        // Refer to tmImage.loadFromFiles() in the API to support files from a file picker
        // or files from your local hard drive
        // Note: the pose library adds "tmImage" object to your window (window.tmImage)
        model = await tmImage.load(modelURL, metadataURL);
        maxPredictions = model.getTotalClasses();

        // Convenience function to setup a webcam
        const flip = true; // whether to flip the webcam
        webcam = new tmImage.Webcam(200, 200, flip); // width, height, flip
        await webcam.setup(); // request access to the webcam
        await webcam.play();
        window.requestAnimationFrame(loop);

        // append elements to the DOM
        document.getElementById("webcam-container").appendChild(webcam.canvas);
        labelContainer = document.getElementById("label-container");
        for (let i = 0; i < maxPredictions; i++) { // and class labels
            labelContainer.appendChild(document.createElement("div"));
        }
    }

    async function loop() {
        webcam.update(); // update the webcam frame
        await predict();
        window.requestAnimationFrame(loop);
    }

    // run the webcam image through the image model
    async function predict() {
        // predict can take in an image, video or canvas html element
        const prediction = await model.predict(webcam.canvas);
        for (let i = 0; i < maxPredictions; i++) {
            const classPrediction =
                prediction[i].className + ": " + prediction[i].probability.toFixed(2);
            labelContainer.childNodes[i].innerHTML = classPrediction;
        }
    }
</script>
    """,
    height=600,
)



st.title("hello")







add after 2nd option_menu

    # col1, col2, col3 = st.columns(3)
    
    # with col1:
    #     age = st.number_input('Age')
        
    # with col2:
    #     sex = st.number_input('Sex')
        
    # with col3:
    #     cp = st.number_input('Chest Pain types')
        
    # with col1:
    #     trestbps = st.number_input('Resting Blood Pressure')
        
    # with col2:
    #     chol = st.number_input('Serum Cholestoral in mg/dl')
        
    # with col3:
    #     fbs = st.number_input('Fasting Blood Sugar > 120 mg/dl')
        
    # with col1:
    #     restecg = st.number_input('Resting Electrocardiographic results')
        
    # with col2:
    #     thalach = st.number_input('Maximum Heart Rate achieved')
        
    # with col3:
    #     exang = st.number_input('Exercise Induced Angina')
        
    # with col1:
    #     oldpeak = st.number_input('ST depression induced by exercise')
        
    # with col2:
    #     slope = st.number_input('Slope of the peak exercise ST segment')
        
    # with col3:
    #     ca = st.number_input('Major vessels colored by flourosopy')
        
    # with col1:
    #     thal = st.number_input('thal: 0 = normal; 1 = fixed defect; 2 = reversable defect')
        
        
     
     
    # # code for Prediction
    # heart_diagnosis = ''
    
    # # creating a button for Prediction
    
    # if st.button('Heart Disease Test Result'):
    #     heart_prediction = heart_disease_model.predict([[age, sex, cp, trestbps, chol, fbs, restecg,thalach,exang,oldpeak,slope,ca,thal]])                          
        
    #     if (heart_prediction[0] == 1):
    #       heart_diagnosis = 'The person is having heart disease'
    #     else:
    #       heart_diagnosis = 'The person does not have any heart disease'
        
    # st.success(heart_diagnosis)